name: Linux

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    name: "Ubuntu Latest ${{matrix.compiler}} ${{matrix.build_type}} ${{matrix.sanitizer}}Sanitizer"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [clang, gcc]
        build_type: [Debug, Release]
        sanitizer: [Address, UB]
        include:
          - compiler: clang
            cc: clang-15
            cxx: clang++-15
            packages: clang-15 libc++-15-dev libc++abi-15-dev libstdc++-12-dev
          - compiler: gcc
            cc: gcc-12
            cxx: g++-12
            packages: g++-12 libstdc++-12-dev

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install ${{matrix.packages}} cmake ninja-build
        ${{matrix.cc}} --version
        ${{matrix.cxx}} --version
        cmake --version
        ninja --version
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure
      env:
        CC: ${{matrix.cc}}
        CXX: ${{matrix.cxx}}
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DSANITIZER=${{matrix.sanitizer}} -G "Ninja" -S "${{github.workspace}}"

    - name: Build
      working-directory: ${{runner.workspace}}/build
      run: |
        threads=`nproc`
        cmake --build . --config ${{matrix.build_type}} --parallel $threads

    - name: Test
      env:
        ASAN_OPTIONS: check_initialization_order=1:detect_stack_use_after_return=1
        CTEST_OUTPUT_ON_FAILURE: 1
        UBSAN_OPTIONS: print_stacktrace=1
      working-directory: ${{runner.workspace}}/build
      run: |
        threads=`nproc`
        ctest --build-config ${{matrix.build_type}} --output-on-failure --parallel $threads